using UWP.DataGrid.Model.RowCol;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;
using Windows.UI.Xaml;
using Windows.UI.Xaml.Data;
using Windows.UI.Xaml.Media;

namespace UWP.DataGrid
{
    public class Column : RowCol
    {
        private Binding _binding;
        private IValueConverter _converter;
        private string _header;
        private DataTemplate _cellTemplate;
        double _minWidth, _maxWidth = double.PositiveInfinity;
        private GridLength _width;
        private DataTemplate _headerTemplate;
        private Type _dataType;

        public bool AutoGenerated { get; set; }

        public string ColumnName { get; set; }

        public PropertyInfo PropertyInfo { get; set; }

        public bool AllowSorting { get; set; }

        public bool AdaptUISize { get; set; }

        public Binding Binding
        {
            get { return _binding; }
            set
            {
                if (_binding != value)
                {
                    // save new binding
                    _binding = value;

                    // preserve converter and format, if any
                    if (_binding != null)
                    {
                        if (_binding.Converter == null)
                        {
                            _binding.Converter = _converter;
                        }
                    }

                    Format = null;
                    _converter = null;

                    PropertyInfo = null;

                    // notify listeners
                    OnPropertyChanged("Binding");
                }
            }
        }

        public string Header
        {
            get { return _header; }
            set
            {
                if (_header != value)
                {
                    _header = value;
                    OnPropertyChanged("Header");
                }
            }
        }

        private object _headerObject;

        public object HeaderObject
        {
            get { return _headerObject; }
            set
            {
                _headerObject = value;
                OnPropertyChanged("HeaderObject");
            }
        }


        public string BoundPropertyName
        {
            get
            {
                var name =
                    PropertyInfo != null ? PropertyInfo.Name :
                    Binding != null && Binding.Path != null ? Binding.Path.Path :
                    null;
                return name;
            }
        }

        [DefaultValue(typeof(GridLength), "Auto")]
        public GridLength Width
        {
            get { return _width; }
            set
            {
                if (value != _width)
                {
                    _width = value;
                    OnPropertyChanged("Size");
                    if (Grid != null)
                    {
                        Grid.UpdateStarSizes();
                    }
                }
            }
        }
        /// <summary>
        /// Gets or sets the minimum width of this column, in pixels (this value is used
        /// only for star-sized columns).
        /// </summary>
        [DefaultValue(0)]
        public double MinWidth
        {
            get { return _minWidth; }
            set
            {
                if (value != _minWidth)
                {
                    _minWidth = value;
                    OnPropertyChanged("Size");
                    if (Grid != null)
                    {
                        Grid.UpdateStarSizes();
                    }
                }
            }
        }
        /// <summary>
        /// Gets or sets the maximum width of this column, in pixels (this value is used
        /// only for star-sized columns).
        /// </summary>
        public double MaxWidth
        {
            get { return _maxWidth; }
            set
            {
                if (value != _maxWidth)
                {
                    _maxWidth = value;
                    OnPropertyChanged("Size");
                    if (Grid != null)
                    {
                        Grid.UpdateStarSizes();
                    }
                }
            }
        }
        public Type DataType
        {
            get
            {
                // data type not specified? get type from PropertyInfo
                if (_dataType == null || _dataType == typeof(object))
                {
                    if (PropertyInfo != null)
                    {
                        return PropertyInfo.PropertyType;
                    }
                }

                return _dataType;
            }
            set { _dataType = value; }
        }
        public string Format { get; set; }

        protected override void OnPropertyChanged(string name)
        {
            if (Columns != null)
            {
                Columns.OnPropertyChanged(this, name);
            }
        }

        public DataTemplate CellTemplate
        {
            get { return _cellTemplate; }
            set
            {
                _cellTemplate = value;
                if (Grid != null)
                {
                    Grid.Invalidate();
                }
            }
        }


        public DataTemplate HeaderTemplate
        {
            get { return _headerTemplate; }
            set
            {
                _headerTemplate = value;
                if (Grid != null)
                {
                    Grid.Invalidate();
                }
            }
        }

        public Brush HeaderForeground { get; set; }

        public HorizontalAlignment HeaderHorizontalAlignment { get; set; }

        public override DataGrid Grid
        {
            get { return Columns != null ? Columns.Grid : null; }
        }
        /// <summary>
        /// Gets the <see cref="GridPanel"/> that this column belongs to.
        /// </summary>

        public override DataGridPanel GridPanel
        {
            get { return Columns != null ? Columns.GridPanel : null; }
        }


        public Column()
        {
            AllowSorting = true;
        }
        internal Columns Columns
        {
            get { return List as Columns; }
        }

        public int Index
        {
            get
            {
                if (Columns != null)
                {
                    this.Columns.Update();
                    return this.ItemIndex;
                }
                return -1;
            }
        }

        internal bool TryChangeType(ref object value)
        {
            return Grid.TryChangeType(ref value, this.DataType);
        }

        internal string GetHeader()
        {
            return string.IsNullOrEmpty(Header) && !string.IsNullOrEmpty(ColumnName)
                ? SplitCamel(ColumnName)
                : Header;
        }

        string SplitCamel(string s)
        {
            var sb = new StringBuilder();
            if (!string.IsNullOrEmpty(s))
            {
                bool wasLower = false;
                for (int i = 0; i < s.Length; i++)
                {
                    if (char.IsUpper(s, i) && wasLower)
                    {
                        sb.Append(' ');
                    }
                    sb.Append(s[i]);
                    wasLower = char.IsLower(s, i);
                }
            }
            return sb.ToString();
        }
    }
}
