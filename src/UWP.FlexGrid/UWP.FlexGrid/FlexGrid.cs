using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;
using UWP.FlexGrid.CollectionView;
using Windows.Foundation;
using Windows.Foundation.Collections;
using Windows.UI.Xaml;
using Windows.UI.Xaml.Controls;
using Windows.UI.Xaml.Data;

namespace UWP.FlexGrid
{
    /// <summary>
    /// 
    /// </summary>
    [TemplatePart(Name = "ScrollViewer", Type = typeof(ScrollViewer))]
    public partial class FlexGrid : Control
    {

        #region Ctor
        public FlexGrid()
        {
            this.DefaultStyleKey = typeof(FlexGrid);
            this.InitializePanel();
            addRemoveItemHanlder = new AddRemoveItemHanlder();
        }

        private void InitializePanel()
        {
            _cellPanel = new FlexGridPanel(this, CellType.Cell, Consts.ROWHEIGHT, Consts.COLUMNWIDTH);

            _columnHeaderPanel = new FlexGridPanel(this, CellType.ColumnHeader, Consts.ROWHEIGHT, Consts.COLUMNWIDTH);
            _columnHeaderPanel.Columns = _cellPanel.Columns;
            _columnHeaderPanel.Rows.Add(new Row());
        }

       

        #endregion

        #region Private Method
        private void OnItemsSourceChanged()
        {
            addRemoveItemHanlder.Reset();
            //_manualSort.Clear();
            ScrollPosition = new Point(ScrollPosition.X, 0);
            if (_view != null)
            {
                _view.VectorChanged -= _view_VectorChanged;
            }
            _view = ItemsSource as ICollectionView;

            _props = null;
            _itemType = null;
            if (_view == null && ItemsSource != null)
            {
                _view = new UWPCollectionView(ItemsSource);
            }

            // remove old rows, auto-generated columns
            Rows.Clear();
         

            // bind grid to new data source
            if (_view != null)
            {
                // connect event handlers
                _view.VectorChanged += _view_VectorChanged;
                // get list of properties available for binding
                _props = GetItemProperties();
                //HanldeOuterScrollViewerWithISupportIncrementalLoading();
                // just in case GetItemProperties changed something

                // initialize non-auto-generated column bindings
                foreach (var col in Columns)
                {
                    //if (!col.AutoGenerated)
                    {
                        BindColumn(col);
                    }
                }

                // load rows
                LoadRows();

            }
        }

        #region View
        private void _view_VectorChanged(Windows.Foundation.Collections.IObservableVector<object> sender, Windows.Foundation.Collections.IVectorChangedEventArgs e)
        {
            if (_props == null || _props.Count == 0 || _itemType != GetItemType(_view))
            {
                if (_itemType == null || !Utils.IsPrimitive(_itemType))
                {
                    if (GetItemType(_view) != typeof(object))
                    {
                        OnItemsSourceChanged();
                        return;
                    }
                }
            }

            // handle the collection change
            OnViewChanged(sender, e);

        }


        internal void OnViewChanged(IObservableVector<object> sender, IVectorChangedEventArgs e)
        {
            //Debug.WriteLine("OnViewChanged------------");
            // handle action
            var rows = Rows;
            var index = (int)e.Index;
            var rowIndex = GetRowIndex(index);

            var topRow = -1;

            if (ItemsUpdatingScrollMode == ItemsUpdatingScrollMode.KeepItemsInView)
            {
                if (_cellPanel != null
               && addRemoveItemHanlder.CurrentTopRow == -1)
                {
                    //_cellPanel.UpdateViewRange();
                    var viewRange = _cellPanel.ViewRange;
                    topRow = viewRange.Row;
                    addRemoveItemHanlder.CurrentTopRow = viewRange.Row;
                }
                topRow = addRemoveItemHanlder.CurrentTopRow;
            }

            //Debug.WriteLine("topRow : " + topRow);
            switch (e.CollectionChange)
            {
                case CollectionChange.ItemInserted:
                    // create the new bound row
                    var r = CreateBoundRow(sender[index]);

                    if (rowIndex < 0)
                    {
                        rowIndex = rows.Count;
                    }

                    // add the new bound row to the rows collection
                    if (rowIndex > -1)
                    {
                        rows.Insert(rowIndex, r);
                    }
                    else
                    {
                        LoadRows();
                    }
                    if (ItemsUpdatingScrollMode == ItemsUpdatingScrollMode.KeepItemsInView)
                    {
                        addRemoveItemHanlder.AddTotalCount++;
                        if (index <= topRow)
                        {
                            //if (Math.Abs(ScrollPosition.Y) >= HeaderMeasureHeight)
                            {
                                //Debug.WriteLine("Add : " + Rows.Count);
                                addRemoveItemHanlder.AddItemLessThanTopCount++;
                                addRemoveItemHanlder.CurrentTopRow++;
                                //ScrollPosition = new Point(ScrollPosition.X, ScrollPosition.Y - _cellPanel.Rows.DefaultSize);
                            }
                        }
                    }
                    break;

                case CollectionChange.ItemRemoved:

                    if (rowIndex > -1)
                    {
                        rows.RemoveAt(rowIndex);
                    }
                    else
                    {
                        LoadRows();
                    }

                    if (ItemsUpdatingScrollMode == ItemsUpdatingScrollMode.KeepItemsInView)
                    {
                        addRemoveItemHanlder.RemoveTotalCount++;
                        if (index <= topRow)
                        {
                            //if (Math.Abs(ScrollPosition.Y) >= HeaderMeasureHeight)
                            {
                                //Debug.WriteLine("Remove : " + Rows.Count);
                                addRemoveItemHanlder.RemoveItemLessThanTopCount++;
                                addRemoveItemHanlder.CurrentTopRow--;
                                //ScrollPosition = new Point(ScrollPosition.X, ScrollPosition.Y + _cellPanel.Rows.DefaultSize);
                            }
                        }
                    }
                    break;

                case CollectionChange.ItemChanged:
                    rows[rowIndex].DataItem = sender[index];
                    _cellPanel.Invalidate(new CellRange(rowIndex, 0, rowIndex, Columns.Count - 1));
                    break;

                default: // Reset, Move
                    if (_cellPanel != null)
                    {
                        _cellPanel.footerHeight = 0;
                        //pointerOverPoint = null;
                    }
                    addRemoveItemHanlder.Reset();
                    LoadRows();
                    break;
            }
            // ensure scrollbars are in sync
            InvalidateArrange();
        }

        internal int GetRowIndex(int dataIndex)
        {
            if (dataIndex > -1)
            {
                // update DataIndex members
                Rows.Update();

                // look for the row with the right DataIndex
                for (int rowIndex = dataIndex; rowIndex < Rows.Count; rowIndex++)
                {
                    if (Rows[rowIndex].DataIndex == dataIndex)
                        return rowIndex;
                }
            }

            // not found
            return -1;
        }
        #endregion

        #region Columns

        //// bind custom column (non-auto generated)
        internal void BindColumn(Column c)
        {
            var b = c.Binding;
            if (b != null)
            {
                // get path from binding (may be null)
                var path = b.Path != null ? b.Path.Path : string.Empty;

                // get PropertyInfo from binding
                PropertyInfo cpi = null;
                if (_props != null && b.Path != null && _props.TryGetValue(path, out cpi))
                {
                    c.PropertyInfo = cpi;
                    if (c.PropertyInfo == null && (c.DataType == null || c.DataType == typeof(object)))
                    {
                        c.DataType = cpi.PropertyType;
                    }
                }

                // set column name if empty
                if (string.IsNullOrEmpty(c.ColumnName))
                {
                    c.ColumnName = cpi != null ? cpi.Name : path;
                }
            }
        }
        #endregion

        #region Rows
        void LoadRows()
        {
            if (_view != null)
            {
                //if (LoadingRows != null)
                //{
                //    LoadingRows(this, EventArgs.Empty);
                //}
                using (Rows.DeferNotifications())
                {
                    // add all data items
                    Rows.Clear();
                    CreateBoundRows();
                }
                //if (LoadedRows != null)
                //{
                //    LoadedRows(this, EventArgs.Empty);
                //}
                // show new data and sorting order
                Invalidate();
            }
        }

        private void CreateBoundRows()
        {
            if (_view != null)
            {

                int count = _view.Count;
                for (int i = 0; i < _view.Count; i++)
                {
                    var item = _view[i];

                    var r = CreateBoundRow(item);
                    Rows.Add(r);
                }

            }
        }

        private Row CreateBoundRow(object dataItem)
        {
            return new BoundRow(dataItem);
        }
        #endregion

        #region Common
        private Dictionary<string, PropertyInfo> GetItemProperties()
        {
            var props = new Dictionary<string, PropertyInfo>();
            if (_view != null)
            {
                // get item type
                _itemType = GetItemType(_view);

                if (_itemType != null && !Utils.IsPrimitive(_itemType))
                {

                    foreach (var pi in _itemType.GetRuntimeProperties())
                    {
                        // skip indexed properties
                        var ix = pi.GetIndexParameters();
                        if (ix != null && ix.Length > 0)
                        {
                            continue;
                        }

                        // keep this one
                        props[pi.Name] = pi;
                    }
                }
            }

            return props;
        }

        private Type GetItemType(ICollectionView view)
        {
            if (view != null)
            {
                // get type from current item
                if (view.CurrentItem != null)
                {
                    return view.CurrentItem.GetType();
                }

                // get type from *any* item
                foreach (var item in view)
                {
                    if (item != null)
                    {
                        return item.GetType();
                    }
                }
            }

            return null;
        }

        #endregion

        #endregion


        #region internal
        internal void UpdateStarSizes()
        {
            throw new NotImplementedException();
        }


        internal void Invalidate()
        {
            throw new NotImplementedException();
        }

        internal void DisposeCell(FlexGridPanel flexGridPanel, FrameworkElement value)
        {
            throw new NotImplementedException();
        }

        internal FrameworkElement CreateCell(FlexGridPanel flexGridPanel, CellRange rng)
        {
            throw new NotImplementedException();
        }
        #endregion

        #region Public Method

        #endregion


    }
}
